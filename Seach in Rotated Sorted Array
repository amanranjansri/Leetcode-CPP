class Solution {
public:


int pivot(vector<int>& arr, int n)
{
    int s = 0;
    int e = n-1;
    int m = s + (e-s)/2;

    while(s<e)
    {
        if(arr[m]>= arr[0])
        {
            s = s + 1;
        }
        else
        {
            e = m;
        }
        m = s + (e-s)/2;
    }
    return s;
}

int binarsearch(vector<int>& arr, int start, int end, int k)
{
    int s = start;
    int e = end;
    int m = s + (e-s)/2;

    while(s<=e)
    {
        if(arr[m]==k)
        {
            return m;
        }
         if(arr[m]>k)
        {
            e = m-1;
        }
        else{
            s = m+1;
        }
        m = s + (e-s)/2;
    }
    return -1;
}


    int search(vector<int>& nums, int target) {
         int ans = pivot(nums,nums.size());
     if(target>= nums[ans] && target<= nums[nums.size()-1])
     {
         return binarsearch(nums,ans,nums.size()-1,target);
     }
     else
     {
         return binarsearch(nums,0,ans-1,target);
     }

    }
};

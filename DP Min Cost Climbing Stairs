class Solution {
public:

// int solve(vector<int>& cost, int n)
// {
//     //base case
//     if(n == 0)
//     {
//         return cost[0];
//     }
//     if(n == 1)
//     {
//         return cost[1];
//     }

//     //recursive call
//     return cost[n] +  min(solve(cost, n-1), solve(cost, n-2));
// }






// int solve(vector<int>& cost, int n, vector<int>& dp)
// {
//     //base case
//     if(n == 0)
//     {
//         return cost[0];
//     }
//     if(n == 1)
//     {
//         return cost[1];
//     }

//     //STEP - 3
//     if(dp[n] != -1)
//     {
//         return dp[n];
//     }

//     //recursive call

//     //STEP - 2
//     dp[n] = cost[n] +  min(solve(cost, n-1, dp), solve(cost, n-2, dp));
//     return dp[n];
// }





// int solve(vector<int>& cost, int n)
// {
//     //STEP -1 CREATION OF DP ARRAY

//     vector<int> dp(n+1);

//     //STEP -2 BASE CASE ANALYSE

//     dp[0] = cost[0];
//     dp[1] = cost[1];

//     //STEP -3

//     for(int i =2; i<n; i++)
//     {
//         dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
//     }   

//     return min(dp[n-1], dp[n-2]);
// }






int solve(vector<int>& cost, int n)
{

    int prev2 = cost[0];
    int prev1 = cost[1];


    for(int i =2; i<n; i++)
    {
        int curr = cost[i] + min(prev1, prev2);
        prev2 = prev1;
        prev1 = curr;
    }   

    return min(prev1, prev2);
}


    int minCostClimbingStairs(vector<int>& cost) {
        // int size = cost.size();
        // //it can be simpliflied more -> home
        // int ans = min(solve(cost,size - 1), solve(cost, size - 2));
        // return ans;

        //TOP TO DOWN = RECURSIVE + MEMORIZATION.

        // int size = cost.size();
        
        // //STEP - 1
        // vector<int>dp(size + 1, -1);
        // return min(solve(cost, size-1, dp), solve(cost, size-2, dp));

        //BOTTOM - UP = TABULATION  

        // int size = cost.size();
        // return solve(cost, size);


        //MEMORY OPTIMISATION

           int size = cost.size();
           return solve(cost, size);
    }
};//26-feb-2023
